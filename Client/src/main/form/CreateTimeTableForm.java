package main.form;

import communication.Response;
import domain.Competition;
import domain.Discipline;
import java.awt.Frame;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import main.controller.IController;

public class CreateTimeTableForm extends javax.swing.JDialog {

    private List<Discipline> showedDisciplines = new ArrayList<>();
    private List<Competition> showedCompetitions = new ArrayList<>();
    private Competition selectedCompetition = null;
    private Discipline selectedDiscipline = null;
    private final IController controller;
    private final Frame parent;

    /**
     * Creates new form CreateDisciplineForm
     *
     * @param parent
     * @param modal
     * @param controller
     * @throws java.lang.Exception
     */
    public CreateTimeTableForm(Frame parent, boolean modal, IController controller) throws Exception {
        super(parent, modal);
        this.controller = controller;
        this.parent = parent;
        initComponents();
        prepareView();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCompetition = new javax.swing.JLabel();
        cmbCompetition = new javax.swing.JComboBox<>();
        lblDiscipline = new javax.swing.JLabel();
        cmbDiscipline = new javax.swing.JComboBox<>();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        cmbDay = new javax.swing.JComboBox<>();
        cmbMonth = new javax.swing.JComboBox<>();
        cmbYear = new javax.swing.JComboBox<>();
        lblTime = new javax.swing.JLabel();
        lblHour = new javax.swing.JLabel();
        lblMinute = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        cmbHour = new javax.swing.JComboBox<>();
        cmbMinute = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kreiranje discipline");

        lblCompetition.setText("Takmi훾enje");

        cmbCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCompetitionActionPerformed(evt);
            }
        });

        lblDiscipline.setText("Disciplina");

        cmbDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDisciplineActionPerformed(evt);
            }
        });

        lblName.setText("Naziv");

        lblDate.setText("Datum odr탑avanja");

        cmbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblTime.setText("Vreme odr탑avanja");

        lblHour.setText("H:");

        lblMinute.setText("M:");

        btnSave.setText("Sa훾uvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cmbHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbDiscipline, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbCompetition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblHour, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMinute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCompetitionActionPerformed
        if (cmbCompetition.getSelectedIndex() == -1) {
            return;
        }
        /* DISCIPLINE */
        String competitionName = (String) cmbCompetition.getSelectedItem();
        for (Competition competition : showedCompetitions) {
            if (competition.getName().equals(competitionName)) {
                selectedCompetition = competition;
                break;
            }
        }

        Response response = controller.getDisciplineByCompetition(selectedCompetition.getId());
        if (response.getException() != null) {
            showError(response.getException().getMessage());
            return;
        }
        showedDisciplines = (List<Discipline>) response.getResult();
        if (showedDisciplines.isEmpty()) {
            lblDiscipline.setVisible(true);
            cmbDiscipline.setVisible(true);
            showMessage("Ne postoje discipline za izabrano takmi훾enje.");
            cmbDiscipline.removeAllItems();
            cmbDiscipline.setEnabled(false);
        } else {
            cmbDiscipline.removeAllItems();
            for (Discipline discipline : showedDisciplines) {
                lblDiscipline.setVisible(true);
                cmbDiscipline.setVisible(true);
                cmbDiscipline.addItem(discipline.getName());
            }
        }

        /* DATUMI */
        prepareDateSection();
    }//GEN-LAST:event_cmbCompetitionActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String hour = (String) cmbHour.getSelectedItem();
        String minute = (String) cmbMinute.getSelectedItem();
        String name = txtName.getText();
        String day = (String) cmbDay.getSelectedItem();
        String month = (String) cmbMonth.getSelectedItem();
        String year = (String) cmbYear.getSelectedItem();
        Response response = controller.addTimetable(selectedCompetition.getId(), selectedDiscipline.getId(), name, day, month, year, hour, minute);

        if (response.getResult() != null) {
            showMessage(response.getResult());
            int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Da li 탑elite da nastavite sa unosom rasporeda disciplina?",
                    "Obave큄tenje", JOptionPane.YES_NO_OPTION);
            if (showConfirmDialog != 0) {
                dispose();
            }
        } else {
            if (response.getException() instanceof IOException) {
                showError("Sistem je pao.");
                dispose();
                parent.dispose();
                return;
            }
            showError(response.getException().getMessage());
            dispose();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDisciplineActionPerformed
        String disciplineName = (String) cmbDiscipline.getSelectedItem();
        for (Discipline discipline : showedDisciplines) {
            if (discipline.getName().equals(disciplineName)) {
                selectedDiscipline = discipline;
                break;
            }
        }
    }//GEN-LAST:event_cmbDisciplineActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbCompetition;
    private javax.swing.JComboBox<String> cmbDay;
    private javax.swing.JComboBox<String> cmbDiscipline;
    private javax.swing.JComboBox<String> cmbHour;
    private javax.swing.JComboBox<String> cmbMinute;
    private javax.swing.JComboBox<String> cmbMonth;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JLabel lblCompetition;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDiscipline;
    private javax.swing.JLabel lblHour;
    private javax.swing.JLabel lblMinute;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void prepareDateSection() {
        cmbDay.removeAllItems();
        cmbMonth.removeAllItems();
        cmbYear.removeAllItems();
        int dayStart = selectedCompetition.getStartDate().getDayOfMonth();
        int dayEnd = selectedCompetition.getEndDate().getDayOfMonth();
        for (int i = dayStart; i <= dayEnd; i++) {
            cmbDay.addItem(String.format("%02d", i));
        }
        int monthStart = selectedCompetition.getStartDate().getMonthValue();
        int monthEnd = selectedCompetition.getEndDate().getMonthValue();
        for (int i = monthStart; i <= monthEnd; i++) {
            cmbMonth.addItem(String.format("%02d", i));
        }
        int yearStart = selectedCompetition.getStartDate().getYear();
        int yearEnd = selectedCompetition.getEndDate().getYear();
        for (int i = yearStart; i <= yearEnd; i++) {
            cmbYear.addItem(i + "");
        }

        cmbHour.removeAllItems();
        cmbMinute.removeAllItems();
        for (int i = 0; i < 24; i++) {
            cmbHour.addItem(String.format("%02d", i));
        }
        for (int i = 0; i < 60; i++) {
            cmbMinute.addItem(String.format("%02d", i));
        }
    }

    private void loadAllCompetitions() throws Exception {
        Response response = controller.getAllCompetitions();
        if (response.getException() != null) {
            throw response.getException();
        }
        cmbCompetition.removeAllItems();
        showedCompetitions = (List<Competition>) response.getResult();
        if (showedCompetitions.isEmpty()) {
            showMessage("Trenutno ne postoji ni jedno uneto takmi훾enje.");
            cmbCompetition.setEnabled(false);
            return;
        }
        fillTable(showedCompetitions);
    }

    private void prepareView() throws Exception {
        lblDiscipline.setVisible(false);
        cmbDiscipline.setVisible(false);
        loadAllCompetitions();
    }

    private void showMessage(Object message) {
        JOptionPane.showMessageDialog(this, message);
    }

    private void showError(Object errorMessage) {
        JOptionPane.showMessageDialog(this, errorMessage, "Gre큄ka", JOptionPane.ERROR_MESSAGE);
    }

    private void fillTable(List<Competition> competitions) {
        for (Competition competition : competitions) {
            cmbCompetition.addItem(competition.getName());
        }
    }
}
