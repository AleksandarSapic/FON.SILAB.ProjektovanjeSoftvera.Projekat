package main.form;

import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import main.controller.IController;
import main.validator.CreateAthleteValidator;
import main.validator.CreateCompetitionValidator;
import main.validator.UpdateAthleteValidator;
import main.validator.UpdateCompetitionValidator;

public class MainForm extends javax.swing.JFrame {

    private final IController controller;

    /**
     * Creates new form MainForm
     *
     * @param controller
     */
    public MainForm(IController controller) {
        initComponents();
        this.controller = controller;
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        menuAthlete = new javax.swing.JMenu();
        menuItemCreateAthlete = new javax.swing.JMenuItem();
        menuItemSearchAthlete = new javax.swing.JMenuItem();
        menuCompetition = new javax.swing.JMenu();
        menuItemCreateCompetition = new javax.swing.JMenuItem();
        menuItemSearchCompetition = new javax.swing.JMenuItem();
        menuDiscipline = new javax.swing.JMenu();
        menuItemCreateDiscipline = new javax.swing.JMenuItem();
        menuItemReadDiscipline = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenu();
        menuItemAboutAuthor = new javax.swing.JMenuItem();
        menuItemAboutProgram = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Softverski sistem za praćenje održavanja atletskog takmičenja");

        menuAthlete.setText("Atletičar");

        menuItemCreateAthlete.setText("Kreiranje atletičara");
        menuItemCreateAthlete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCreateAthleteActionPerformed(evt);
            }
        });
        menuAthlete.add(menuItemCreateAthlete);

        menuItemSearchAthlete.setText("Pretraživanje atletičara");
        menuItemSearchAthlete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSearchAthleteActionPerformed(evt);
            }
        });
        menuAthlete.add(menuItemSearchAthlete);

        menuBar.add(menuAthlete);

        menuCompetition.setText("Takmičenje");

        menuItemCreateCompetition.setText("Kreiranje takmičenja");
        menuItemCreateCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCreateCompetitionActionPerformed(evt);
            }
        });
        menuCompetition.add(menuItemCreateCompetition);

        menuItemSearchCompetition.setText("Pretraživanje takmičenja");
        menuItemSearchCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSearchCompetitionActionPerformed(evt);
            }
        });
        menuCompetition.add(menuItemSearchCompetition);

        menuBar.add(menuCompetition);

        menuDiscipline.setText("Raspored");

        menuItemCreateDiscipline.setText("Kreiraj raspored");
        menuItemCreateDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCreateDisciplineActionPerformed(evt);
            }
        });
        menuDiscipline.add(menuItemCreateDiscipline);

        menuItemReadDiscipline.setText("Vidi ceo raspored");
        menuItemReadDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReadDisciplineActionPerformed(evt);
            }
        });
        menuDiscipline.add(menuItemReadDiscipline);

        menuBar.add(menuDiscipline);

        menuAbout.setText("Ostalo");

        menuItemAboutAuthor.setText("O autoru");
        menuItemAboutAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutAuthorActionPerformed(evt);
            }
        });
        menuAbout.add(menuItemAboutAuthor);

        menuItemAboutProgram.setText("O programu");
        menuItemAboutProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutProgramActionPerformed(evt);
            }
        });
        menuAbout.add(menuItemAboutProgram);

        menuBar.add(menuAbout);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 477, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemAboutAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutAuthorActionPerformed
        new AboutAuthorForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuItemAboutAuthorActionPerformed

    private void menuItemCreateAthleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCreateAthleteActionPerformed
        controller.setValidator(CreateAthleteValidator.getInstance());
        CreateAthleteForm createAthleteForm = new CreateAthleteForm(this, true, controller);
        showMessage("Sistem je kreirao atletičara");
        createAthleteForm.setVisible(true);
    }//GEN-LAST:event_menuItemCreateAthleteActionPerformed

    private void menuItemSearchAthleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSearchAthleteActionPerformed
        try {
            controller.setValidator(UpdateAthleteValidator.getInstance());
            new SearchAthleteForm(this, true, controller).setVisible(true);
        } catch (IOException ex) {
            showError("Sistem je pao.");
            dispose();
        } catch (Exception ex) {
            showError("Greška prilikom ucitavanja atletičara.");
        }
    }//GEN-LAST:event_menuItemSearchAthleteActionPerformed

    private void menuItemAboutProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutProgramActionPerformed
        new AboutProgramForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuItemAboutProgramActionPerformed

    private void menuItemCreateCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCreateCompetitionActionPerformed
        try {
            controller.setValidator(CreateCompetitionValidator.getInstance());
            CreateCompetitionForm createCompetitionForm = new CreateCompetitionForm(this, true, controller);
            showMessage("Sistem je kreirao takmičenje");
            createCompetitionForm.setVisible(true);
        } catch (IOException ex) {
            showError("Sistem je pao.");
            dispose();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            showError("Sistem ne može da kreira takmičenje");
        }
    }//GEN-LAST:event_menuItemCreateCompetitionActionPerformed

    private void menuItemSearchCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSearchCompetitionActionPerformed
        try {
            controller.setValidator(UpdateCompetitionValidator.getInstance());
            new SearchCompetitionForm(this, true, controller).setVisible(true);
        } catch (IOException ex) {
            showError("Sistem je pao.");
            dispose();
        } catch (Exception ex) {
            showError("Greška prilikom ucitavanja takmičenja.");
        }
    }//GEN-LAST:event_menuItemSearchCompetitionActionPerformed

    private void menuItemCreateDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCreateDisciplineActionPerformed
        try {
            CreateTimeTableForm createTimeTableForm = new CreateTimeTableForm(this, true, controller);
            showMessage("Sistem je kreirao raspored disciplina");
            createTimeTableForm.setVisible(true);
        } catch (IOException ex) {
            showError("Sistem je pao.");
            dispose();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            showError("Sistem ne može da kreira raspored disciplina");
        }
    }//GEN-LAST:event_menuItemCreateDisciplineActionPerformed

    private void menuItemReadDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReadDisciplineActionPerformed
        try {
            controller.setValidator(CreateCompetitionValidator.getInstance());
            new SearchTimeTableForm(this, true, controller).setVisible(true);
        } catch (IOException ex) {
            showError("Sistem je pao.");
            dispose();
        } catch (Exception ex) {
            showError("Greška prilikom ucitavanja disciplina.");
        }
    }//GEN-LAST:event_menuItemReadDisciplineActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenu menuAthlete;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuCompetition;
    private javax.swing.JMenu menuDiscipline;
    private javax.swing.JMenuItem menuItemAboutAuthor;
    private javax.swing.JMenuItem menuItemAboutProgram;
    private javax.swing.JMenuItem menuItemCreateAthlete;
    private javax.swing.JMenuItem menuItemCreateCompetition;
    private javax.swing.JMenuItem menuItemCreateDiscipline;
    private javax.swing.JMenuItem menuItemReadDiscipline;
    private javax.swing.JMenuItem menuItemSearchAthlete;
    private javax.swing.JMenuItem menuItemSearchCompetition;
    // End of variables declaration//GEN-END:variables

    private void showMessage(Object message) {
        JOptionPane.showMessageDialog(this, message);
    }

    private void showError(Object errorMessage) {
        JOptionPane.showMessageDialog(this, errorMessage, "Greška", JOptionPane.ERROR_MESSAGE);
    }
}
