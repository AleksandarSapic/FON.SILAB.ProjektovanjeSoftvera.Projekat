package main.form;

import communication.Response;
import domain.Competition;
import domain.Discipline;
import java.awt.Frame;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import main.controller.IController;

public class UpdateCompetitionForm extends javax.swing.JDialog {

    private final Frame parent;
    private List<Discipline> allDisciplines = new ArrayList<>();
    private List<Discipline> selectedDisciplines = new ArrayList<>();
    private final IController controller;
    private final SearchCompetitionForm searchForm;
    private int typeId;

    /**
     * Creates new form UpdateCompetitionForm
     *
     * @param parent
     * @param modal
     * @param searchForm
     * @param controller
     */
    public UpdateCompetitionForm(Frame parent, boolean modal, SearchCompetitionForm searchForm, IController controller) {
        super(parent, modal);
        this.parent = parent;
        this.controller = controller;
        this.searchForm = searchForm;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblType = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblDateStart = new javax.swing.JLabel();
        lblDateEnd = new javax.swing.JLabel();
        cmbDayStart = new javax.swing.JComboBox<>();
        cmbMonthStart = new javax.swing.JComboBox<>();
        cmbYearStart = new javax.swing.JComboBox<>();
        cmbDayEnd = new javax.swing.JComboBox<>();
        cmbMonthEnd = new javax.swing.JComboBox<>();
        cmbYearEnd = new javax.swing.JComboBox<>();
        lblDiscipline = new javax.swing.JLabel();
        cmbDiscipline = new javax.swing.JComboBox<>();
        btnAddDiscipline = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        disciplineList = new javax.swing.JList<>();
        btnRemoveDiscipline = new javax.swing.JButton();
        lblId = new javax.swing.JLabel();
        txtType = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblType.setText("Tip takmičenja");

        lblName.setText("Naziv takmičenja");

        lblDateStart.setText("Datum početka");

        lblDateEnd.setText("Datum kraja");

        cmbDayStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMonthStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbYearStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbDayEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMonthEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbYearEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblDiscipline.setText("Disciplina");

        cmbDiscipline.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAddDiscipline.setText("Dodaj");
        btnAddDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDisciplineActionPerformed(evt);
            }
        });

        disciplineList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(disciplineList);

        btnRemoveDiscipline.setText("Ukloni");
        btnRemoveDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDisciplineActionPerformed(evt);
            }
        });

        btnUpdate.setText("Ažuriraj");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Sačuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDateStart, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(lblDateEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(lblDiscipline, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbDayStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMonthStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbYearStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbDayEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMonthEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbYearEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbDiscipline, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtName)
                    .addComponent(txtType))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddDiscipline)
                    .addComponent(btnRemoveDiscipline)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblId)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDayStart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonthStart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbYearStart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDayEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonthEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbYearEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDiscipline, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(cmbDiscipline)
                    .addComponent(btnAddDiscipline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemoveDiscipline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btnSave)))
                .addContainerGap(228, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        setFieldsForUpdate();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String name = txtName.getText();

        String dayStart = cmbDayStart.getSelectedItem().toString();
        String monthStart = cmbMonthStart.getSelectedItem().toString();
        String yearStart = cmbYearStart.getSelectedItem().toString();

        String dayEnd = cmbDayEnd.getSelectedItem().toString();
        String monthEnd = cmbMonthEnd.getSelectedItem().toString();
        String yearEnd = cmbYearEnd.getSelectedItem().toString();

        Response response = controller.updateCompetition(Integer.parseInt(lblId.getText()), name, dayStart, monthStart, yearStart, dayEnd, monthEnd, yearEnd, typeId, getListOfSelectedDisciplinesIds());
        if (response.getException() != null) {

            if (response.getException() instanceof IOException) {
                showError("Sistem je pao.");
                dispose();
                parent.dispose();
                return;
            }

            showError(response.getException().getMessage());
        } else {
            showMessage(response.getResult());
        }
        searchForm.updateTable();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDisciplineActionPerformed
        String selectedDiscipline = (String) cmbDiscipline.getSelectedItem();
        for (Discipline discipline : selectedDisciplines) {
            if (selectedDiscipline.equals(discipline.getName())) {
                showMessage(selectedDiscipline + " ste već dodali.");
                return;
            }
        }
        for (Discipline discipline : allDisciplines) {
            if (selectedDiscipline.equals(discipline.getName())) {
                selectedDisciplines.add(discipline);
            }
        }
        updateList();
    }//GEN-LAST:event_btnAddDisciplineActionPerformed

    private void btnRemoveDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDisciplineActionPerformed
        String selectedDiscipline = disciplineList.getSelectedValue();
        for (Discipline discipline : selectedDisciplines) {
            if (discipline.getName().equals(selectedDiscipline)) {
                selectedDisciplines.remove(discipline);
                break;
            }
        }
        updateList();
    }//GEN-LAST:event_btnRemoveDisciplineActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDiscipline;
    private javax.swing.JButton btnRemoveDiscipline;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbDayEnd;
    private javax.swing.JComboBox<String> cmbDayStart;
    private javax.swing.JComboBox<String> cmbDiscipline;
    private javax.swing.JComboBox<String> cmbMonthEnd;
    private javax.swing.JComboBox<String> cmbMonthStart;
    private javax.swing.JComboBox<String> cmbYearEnd;
    private javax.swing.JComboBox<String> cmbYearStart;
    private javax.swing.JList<String> disciplineList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDateEnd;
    private javax.swing.JLabel lblDateStart;
    private javax.swing.JLabel lblDiscipline;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblType;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtType;
    // End of variables declaration//GEN-END:variables

    public void loadCompetition(Competition competition) throws Exception {
        if (competition == null) {
            throw new NullPointerException("Competition ne sme da bude null");
        }
        lblId.setText(String.valueOf(competition.getId()));
        txtType.setText(competition.getType().getName());
        typeId = competition.getType().getId();
        txtName.setText(competition.getName());
        prepareDateSection();
        cmbDayStart.setSelectedItem(String.format("%02d", competition.getStartDate().getDayOfMonth()));
        cmbMonthStart.setSelectedItem(String.format("%02d", competition.getStartDate().getMonthValue()));
        cmbYearStart.setSelectedItem(competition.getStartDate().getYear() + "");
        cmbDayEnd.setSelectedItem(String.format("%02d", competition.getEndDate().getDayOfMonth()));
        cmbMonthEnd.setSelectedItem(String.format("%02d", competition.getEndDate().getMonthValue()));
        cmbYearEnd.setSelectedItem(competition.getEndDate().getYear() + "");

        loadAllDisciplines();
        loadSelectedDisciplines(competition.getId());
        setFieldsForRead();
    }

    private void loadAllDisciplines() throws Exception {
        cmbDiscipline.removeAllItems();
        Response response = controller.getAllDisciplines();
        if (response.getException() != null) {
            throw response.getException();
        }
        allDisciplines = (List<Discipline>) response.getResult();
        for (Discipline discipline : allDisciplines) {
            cmbDiscipline.addItem(discipline.getName());
        }
    }

    private void loadSelectedDisciplines(int id) throws Exception {
        Response response = controller.getDisciplineByCompetition(id);

        if (response.getException() != null) {
            throw response.getException();
        }

        selectedDisciplines = (List<Discipline>) response.getResult();
        DefaultListModel model = new DefaultListModel();
        for (Discipline discipline : selectedDisciplines) {
            model.addElement(discipline.getName());
        }
        disciplineList.setModel(model);
    }

    private void prepareDateSection() {
        cmbDayStart.removeAllItems();
        cmbDayEnd.removeAllItems();
        for (int i = 1; i <= 31; i++) {
            cmbDayStart.addItem(String.format("%02d", i));
            cmbDayEnd.addItem(String.format("%02d", i));
        }

        cmbMonthStart.removeAllItems();
        cmbMonthEnd.removeAllItems();
        for (int i = 1; i <= 12; i++) {
            cmbMonthStart.addItem(String.format("%02d", i));
            cmbMonthEnd.addItem(String.format("%02d", i));
        }

        cmbYearStart.removeAllItems();
        cmbYearEnd.removeAllItems();
        for (int i = LocalDate.now().getYear(); i <= LocalDate.now().getYear() + 5; i++) {
            cmbYearStart.addItem(i + "");
            cmbYearEnd.addItem(i + "");
        }
    }

    private void showMessage(Object message) {
        JOptionPane.showMessageDialog(this, message);
    }

    private void showError(Object errorMessage) {
        JOptionPane.showMessageDialog(this, errorMessage, "Greška", JOptionPane.ERROR_MESSAGE);
    }

    private void setFieldsForRead() {
        txtType.setEditable(false);
        txtName.setEditable(false);
        cmbDayStart.setEnabled(false);
        cmbMonthStart.setEnabled(false);
        cmbYearStart.setEnabled(false);
        cmbDayEnd.setEnabled(false);
        cmbMonthEnd.setEnabled(false);
        cmbYearEnd.setEnabled(false);
        cmbDiscipline.setEnabled(false);
        btnAddDiscipline.setEnabled(false);
        btnRemoveDiscipline.setEnabled(false);
        btnSave.setVisible(false);
    }

    private void setFieldsForUpdate() {
        txtName.setEditable(true);
        cmbDayStart.setEnabled(true);
        cmbMonthStart.setEnabled(true);
        cmbYearStart.setEnabled(true);
        cmbDayEnd.setEnabled(true);
        cmbMonthEnd.setEnabled(true);
        cmbYearEnd.setEnabled(true);
        cmbDiscipline.setEnabled(true);
        btnAddDiscipline.setEnabled(true);
        btnRemoveDiscipline.setEnabled(true);
        btnUpdate.setVisible(false);
        btnSave.setVisible(true);
    }

    private void updateList() {
        DefaultListModel model = new DefaultListModel();
        for (Discipline discipline : selectedDisciplines) {
            model.addElement(discipline.getName());
        }
        disciplineList.setModel(model);
    }

    private List<Integer> getListOfSelectedDisciplinesIds() {
        List<Integer> ids = new ArrayList<>();
        for (Discipline discipline : selectedDisciplines) {
            ids.add(discipline.getId());
        }
        return ids;
    }
}
