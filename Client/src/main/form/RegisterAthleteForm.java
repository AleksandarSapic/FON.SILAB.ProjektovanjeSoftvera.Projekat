package main.form;

import communication.Response;
import domain.Athlete;
import domain.Competition;
import domain.Discipline;
import java.awt.Frame;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jdk.jshell.spi.ExecutionControl;
import main.controller.IController;

public class RegisterAthleteForm extends javax.swing.JDialog {

    private final Frame parent;
    private final IController controller;
    private final UpdateAthleteForm updateForm;
    private List<Competition> showedCompetitions = new ArrayList<>();
    private List<Discipline> showedDisciplines = new ArrayList<>();
    private Competition selectedCompetition = null;
    private Discipline selectedDiscipline = null;
    private Athlete athlete;

    /**
     * Creates new form RegisterAthleteForCompetitionForm
     *
     * @param parent
     * @param modal
     * @param updateForm
     * @param controller
     */
    public RegisterAthleteForm(Frame parent, boolean modal, UpdateAthleteForm updateForm, IController controller) {
        super(parent, modal);
        this.controller = controller;
        this.updateForm = updateForm;
        this.parent = parent;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblId = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblBirthDay = new javax.swing.JLabel();
        lblCompetition = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        cmbCompetition = new javax.swing.JComboBox<>();
        btnRegister = new javax.swing.JButton();
        lblDiscipline = new javax.swing.JLabel();
        cmbDiscipline = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registruj atletičara na takmičenje");

        lblId.setText("ID");

        lblFirstName.setText("Ime");

        lblLastName.setText("Prezime");

        lblBirthDay.setText("Datum rođenja");

        lblCompetition.setText("Takmičenje");

        lblState.setText("Država");

        cmbCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCompetitionActionPerformed(evt);
            }
        });

        btnRegister.setText("Registruj");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lblDiscipline.setText("Disciplina");

        cmbDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDisciplineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDiscipline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblState, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbDiscipline, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCompetition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblState, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCompetitionActionPerformed
        if (cmbCompetition.getSelectedIndex() == -1) {
            return;
        }
        /* DISCIPLINE */
        String competitionName = (String) cmbCompetition.getSelectedItem();
        for (Competition competition : showedCompetitions) {
            if (competition.getName().equals(competitionName)) {
                selectedCompetition = competition;
                break;
            }
        }

        Response response = controller.getDisciplineByCompetition(selectedCompetition.getId());
        if (response.getException() != null) {
            showError(response.getException().getMessage());
            return;
        }
        showedDisciplines = (List<Discipline>) response.getResult();
        if (showedDisciplines.isEmpty()) {
            lblDiscipline.setVisible(true);
            cmbDiscipline.setVisible(true);
            showMessage("Ne postoje discipline za izabrano takmičenje.");
            cmbDiscipline.removeAllItems();
            cmbDiscipline.setEnabled(false);
        } else {
            cmbDiscipline.removeAllItems();
            for (Discipline discipline : showedDisciplines) {
                lblDiscipline.setVisible(true);
                cmbDiscipline.setVisible(true);
                cmbDiscipline.addItem(discipline.getName());
            }
        }
    }//GEN-LAST:event_cmbCompetitionActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        Response response = controller.addApplicationForm(athlete.getId(), selectedCompetition.getId(), selectedDiscipline.getId());
        if (response.getResult() != null) {
            showMessage(response.getResult());
            int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Da li želite da nastavite sa unosom rasporeda disciplina?",
                    "Obaveštenje", JOptionPane.YES_NO_OPTION);
            if (showConfirmDialog != 0) {
                dispose();
                updateForm.updateApplicationForms();
            }
        } else {
            if (response.getException() instanceof IOException) {
                showError("Sistem je pao.");
                dispose();
                parent.dispose();
                return;
            }
            showError(response.getException().getMessage());
            dispose();
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void cmbDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDisciplineActionPerformed
        String disciplineName = (String) cmbDiscipline.getSelectedItem();
        for (Discipline discipline : showedDisciplines) {
            if (discipline.getName().equals(disciplineName)) {
                selectedDiscipline = discipline;
                break;
            }
        }
    }//GEN-LAST:event_cmbDisciplineActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox<String> cmbCompetition;
    private javax.swing.JComboBox<String> cmbDiscipline;
    private javax.swing.JLabel lblBirthDay;
    private javax.swing.JLabel lblCompetition;
    private javax.swing.JLabel lblDiscipline;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblState;
    // End of variables declaration//GEN-END:variables

    public void prepareView(Athlete athlete) throws Exception {
        try {
            setAthlete(athlete);
            loadAllCompetitions();
        } catch (ExecutionControl.NotImplementedException ex) {
            Logger.getLogger(RegisterAthleteForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setAthlete(Athlete athlete) throws ExecutionControl.NotImplementedException {
        if (athlete == null) {
            throw new ExecutionControl.NotImplementedException("Atleticar nije definisan");
        }
        lblId.setText(String.valueOf(athlete.getId()));
        lblFirstName.setText(athlete.getFirstname());
        lblLastName.setText(athlete.getLastname());
        lblBirthDay.setText(athlete.getBirthday().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        lblState.setText(athlete.getState());
        this.athlete = athlete;
    }

    private void loadAllCompetitions() throws Exception {
        Response response = controller.getAllCompetitions();
        if (response.getException() != null) {
            throw response.getException();
        }
        cmbCompetition.removeAllItems();
        showedCompetitions = (List<Competition>) response.getResult();
        if (showedCompetitions.isEmpty()) {
            showMessage("Trenutno ne postoji ni jedno uneto takmičenje.");
            cmbCompetition.setEnabled(false);
            return;
        }
        fillTable(showedCompetitions);
    }

    private void showMessage(Object message) {
        JOptionPane.showMessageDialog(this, message);
    }

    private void showError(Object errorMessage) {
        JOptionPane.showMessageDialog(this, errorMessage, "Greška", JOptionPane.ERROR_MESSAGE);
    }

    private void fillTable(List<Competition> competitions) {
        for (Competition competition : competitions) {
            cmbCompetition.addItem(competition.getName());
        }
    }
}
